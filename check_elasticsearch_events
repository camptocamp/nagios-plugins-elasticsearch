#!/usr/bin/env python

import ast
import sys
import json
import optparse
from datetime import datetime, timedelta
from elasticsearch import Elasticsearch

NAGIOS_STATUS = { "OK": 0, "WARNING": 1, "CRITICAL": 2, "UNKNOWN": 3 }
BODY_TEMPLATE = """
{
  "facets": {
    "0": {
      "query": {
        "filtered": {
          "query": {
            "query_string": {
              "query": "%s"
            }
          },
          "filter": {
            "bool": {
              "must": [
                { 
                  "range": {
                    "@timestamp": {
                      "from": %i,
                      "to": "now"
                    }
                  }
                }
              ]
            }
          }
        }
      }
    }
  },
  "size": 0
}
""" 

parser = optparse.OptionParser()
parser.add_option("-n", "--nodes", dest="nodes", metavar="NODES",
  type="string", default="[{'host': 'localhost', 'port': 9200}]",
  help="List of nodes we should connect to, see Python Elasticsearch Documentation, default [{'host': 'localhost', 'port': 9200}]")
parser.add_option("-i", "--index", dest="index", metavar="INDEX",
  type="string", default="_all",
  help="ES index pattern to use, default _all")
parser.add_option("-q", "--query", dest="query", metavar="QUERY",
  type="string", default="*",
  help="lucene query expression, default '*'")
parser.add_option("-s", "--second", dest="second", metavar="SECOND",
  type="int", default=120,
  help="Number of INTEGER seconds from now, default 120")
parser.add_option("-w", "--warning", dest="warning", metavar="WARNING",
  type="int", default=100,
  help="Exit with WARNING status if less than or egal to INTEGER events are counted in ES, default 100")
parser.add_option("-c", "--critical", dest="critical", metavar="CRITICAL",
  type="int", default=0,
  help="Exit with CRITICAL status if less than or egal to INTEGER events are counted in ES, default 0")

try:

  (options, args) = parser.parse_args()

  es = Elasticsearch(ast.literal_eval(options.nodes))
  utime = int((datetime.now() - timedelta(seconds=options.second)).strftime('%s')) * 1000
  body = json.loads(BODY_TEMPLATE % (options.query, utime))
  res = es.search(index=options.index, body=body, search_type='count')
  count = res['facets']['0']['count']
 
except:
  print "UNKNOWN: unexpected error:", sys.exc_info()[0]
  sys.exit(NAGIOS_STATUS['UNKNOWN'])
 
if count <= options.critical:
  print "CRITICAL: %s seconds with %s events matching this query!" %  (options.second, count)
  sys.exit(NAGIOS_STATUS['CRITICAL'])

if count <= options.warning:
  print "WARNING: %s seconds with %s events matching this query!" % (options.second, count)
  sys.exit(NAGIOS_STATUS['WARNING'])
else: 
  print "OK, %s events counted in the last %s seconds" % (count, options.second)
  sys.exit(NAGIOS_STATUS['OK'])


